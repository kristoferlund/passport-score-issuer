type ArgumentValue = variant { Int : int32; String : text };
type CredentialSpec = record {
  arguments : opt vec record { text; ArgumentValue };
  credential_type : text;
};
type DerivationOriginData = record { origin : text };
type DerivationOriginError = variant {
  Internal : text;
  UnsupportedOrigin : text;
};
type DerivationOriginRequest = record { frontend_hostname : text };
type GetCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  prepared_context : opt blob;
  credential_spec : CredentialSpec;
};
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type HttpResponse_1 = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentPreferences = record { language : text };
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat };
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type Icrc21VcConsentMessageRequest = record {
  preferences : Icrc21ConsentPreferences;
  credential_spec : CredentialSpec;
};
type IssueCredentialError = variant {
  Internal : text;
  SignatureNotFound : text;
  InvalidIdAlias : text;
  UnauthorizedSubject : text;
  UnknownSubject : text;
  UnsupportedCredentialSpec : text;
};
type IssuedCredentialData = record { vc_jws : text };
type PrepareCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  credential_spec : CredentialSpec;
};
type PreparedCredentialData = record { prepared_context : opt blob };
type Result = variant {
  Ok : DerivationOriginData;
  Err : DerivationOriginError;
};
type Result_1 = variant {
  Ok : IssuedCredentialData;
  Err : IssueCredentialError;
};
type Result_2 = variant {
  Ok : PreparedCredentialData;
  Err : IssueCredentialError;
};
type Result_3 = variant { Ok : float32; Err : text };
type Result_4 = variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error };
type SettingsInput = record {
  ii_canister_id : principal;
  ic_root_key_der : blob;
};
type SignedIdAlias = record { credential_jws : text };
type TransformArgs = record { context : blob; response : HttpResponse_1 };
service : (SettingsInput) -> {
  derivation_origin : (DerivationOriginRequest) -> (Result);
  get_credential : (GetCredentialRequest) -> (Result_1) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  prepare_credential : (PrepareCredentialRequest) -> (Result_2);
  score_get : () -> (Result_3) query;
  score_link : (text, text) -> (Result_3);
  transform : (TransformArgs) -> (HttpResponse) query;
  vc_consent_message : (Icrc21VcConsentMessageRequest) -> (Result_4);
}
